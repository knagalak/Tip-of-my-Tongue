var express = require("express");
var request = require("request");
var bodyParser = require("body-parser");
var mongoose = require("mongoose");

var db = mongoose.connect(process.env.MONGODB_URI);
var Word = require("./models/word");
const apiaiApp = require('apiai')(CLIENT_ACCESS_TOKEN);


var app = express();
app.use(bodyParser.urlencoded({extended: false}));
app.use(bodyParser.json());
app.listen((process.env.PORT || 5000));

// Server index page
app.get("/", function (req, res) {
	res.send("Deployed!");
    });

// Facebook Webhook
// Used for verification
app.get("/webhook", function (req, res) {
	if (req.query["hub.verify_token"] === "this_is_my_token") {
	    console.log("Verified webhook");
	    res.status(200).send(req.query["hub.challenge"]);
	} else {
	    console.error("Verification failed. The tokens do not match.");
	    res.sendStatus(403);
	}
    });

// All callbacks for Messenger will be POST-ed here
app.post("/webhook", function (req, res) {

	if (req.body.object == "page") {

	    req.body.entry.forEach(function(entry) {

		    entry.messaging.forEach(function(event) {
			    if (event.postback) {
				//Button Clicked
				processPostback(event);
			    } else if (event.message) {
				//Message Sent
				processMessage(event);
			    }
			});
		});

	    res.sendStatus(200);
	}
    });

function processPostback(event) {
    var senderId = event.sender.id;
    var payload = event.postback.payload;

    if (payload === "Greeting") {
        // Get Started clicked
        request({
		url: "https://graph.facebook.com/v2.6/" + senderId,
		    qs: {
		    access_token: process.env.PAGE_ACCESS_TOKEN,
			fields: "first_name"
			},
		    method: "GET"
		    }, function(error, response, body) {
		var greeting = "";
		if (error) {
		    console.log("Error getting user's name: " +  error);
		} else {
		    var bodyObj = JSON.parse(body);
		    name = bodyObj.first_name;
		    greeting = "Hi " + name + ". ";
		}
		var message = greeting + "I know how it feels when you have a word on the tip of your tongue and cannot seem to remember it! Let me help you find it... Some commands include starting with --, related to --, sound like --, starts with the letter --, ends with the letter --, spelt like -- etc..";
		sendMessage(senderId, {text: message});
	    });
    }
}

function processMessage(event) {
    if (!event.message.is_echo) {
        var message = event.message;
        var senderId = event.sender.id;

        console.log("Received message from senderId: " + senderId);
        console.log("Message is: " + JSON.stringify(message));

       
        if (message.text) {
            var formattedMsg = message.text;

	    /**
	    let apiai = apiaiApp.textRequest(formattedMsg, {
		    sessionId: 'tip_of_my_tongue' // use any arbitrary id
		});

	    apiai.on('response', (response) => {
		    // Got a response from api.ai. Based on intent, update DB and send a message
		    let intent = response.result.parameters[0];
		    message = {
			attachment: {
			    type: "template",
			    payload: {
				template_type: "generic",
				elements: [{
					title: "Is this the word?",
					subtitle: intent ,
				       
					buttons: [{
						type: "postback",
						title: "Yes",
						payload: "Correct"
					    }, {
						type: "postback",
						title: "No",
						payload: "Incorrect"
					    }]
				    }]
			    }
			}

		       
		    }
		    sendMessage(userID,message);

	    apiai.on('error', (error) => {
		    console.log(error);
		});

	    apiai.end();
 

	    **/

        } else if (message.attachments) {
            sendMessage(senderId, {text: "Sorry, I don't understand your request."});
        }
    }
}

function findMovie(userId, movieTitle) {
    request("http://www.omdbapi.com/?type=movie&t=" + movieTitle, function (error, response, body) {
	    if (!error && response.statusCode == 200) {
		var movieObj = JSON.parse(body);
		if (movieObj.Response === "True") {
		    var query = {user_id: userId};
		    var update = {
			user_id: userId,
			title: movieObj.Title,
			plot: movieObj.Plot,
			date: movieObj.Released,
			runtime: movieObj.Runtime,
			director: movieObj.Director,
			cast: movieObj.Actors,
			rating: movieObj.imdbRating,
			poster_url:movieObj.Poster
		    };
		    var options = {upsert: true};
		    Movie.findOneAndUpdate(query, update, options, function(err, mov) {
			    if (err) {
				console.log("Database error: " + err);
			    } else {
				message = {
				    attachment: {
					type: "template",
					payload: {
					    template_type: "generic",
					    elements: [{
						    title: movieObj.Title,
						    subtitle: "Is this the movie you are looking for?",
						    image_url: movieObj.Poster === "N/A" ? "http://placehold.it/350x150" : movieObj.Poster,
						    buttons: [{
							    type: "postback",
							    title: "Yes",
							    payload: "Correct"
							}, {
							    type: "postback",
							    title: "No",
							    payload: "Incorrect"
							}]
						}]
					}
				    }
				};
				sendMessage(userId, message);
			    }
			});
		} else {
		    console.log(movieObj.Error);
		    sendMessage(userId, {text: movieObj.Error});
		}
	    } else {
		sendMessage(userId, {text: "Something went wrong. Try again."});
	    }
	});
}

// sends message to user
function sendMessage(recipientId, message) {
    request({
	    url: "https://graph.facebook.com/v2.6/me/messages",
		qs: {access_token: process.env.PAGE_ACCESS_TOKEN},
		method: "POST",
		json: {
		recipient: {id: recipientId},
		    message: message,
		    }
	}, function(error, response, body) {
	    if (error) {
		console.log("Error sending message: " + response.error);
	    }
	});
}